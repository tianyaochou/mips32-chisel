;buildInfoPackage: chisel3, version: 3.1.7, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-03-20 22:15:13.399, builtAtMillis: 1553120113399
circuit Top : 
  module Debounce : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<1>, out : UInt<1>}
    
    reg d1 : UInt<1>, clock @[Debounce.scala 10:19]
    d1 <= io.in @[Debounce.scala 10:19]
    reg d2 : UInt<1>, clock @[Debounce.scala 11:19]
    d2 <= d1 @[Debounce.scala 11:19]
    node _T_11 = not(d2) @[Debounce.scala 13:19]
    node _T_12 = and(d1, _T_11) @[Debounce.scala 13:16]
    io.out <= _T_12 @[Debounce.scala 13:10]
    
  module Debounce_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<1>, out : UInt<1>}
    
    reg d1 : UInt<1>, clock @[Debounce.scala 10:19]
    d1 <= io.in @[Debounce.scala 10:19]
    reg d2 : UInt<1>, clock @[Debounce.scala 11:19]
    d2 <= d1 @[Debounce.scala 11:19]
    node _T_11 = not(d2) @[Debounce.scala 13:19]
    node _T_12 = and(d1, _T_11) @[Debounce.scala 13:16]
    io.out <= _T_12 @[Debounce.scala 13:10]
    
  module Debounce_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<1>, out : UInt<1>}
    
    reg d1 : UInt<1>, clock @[Debounce.scala 10:19]
    d1 <= io.in @[Debounce.scala 10:19]
    reg d2 : UInt<1>, clock @[Debounce.scala 11:19]
    d2 <= d1 @[Debounce.scala 11:19]
    node _T_11 = not(d2) @[Debounce.scala 13:19]
    node _T_12 = and(d1, _T_11) @[Debounce.scala 13:16]
    io.out <= _T_12 @[Debounce.scala 13:10]
    
  module Debounce_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<1>, out : UInt<1>}
    
    reg d1 : UInt<1>, clock @[Debounce.scala 10:19]
    d1 <= io.in @[Debounce.scala 10:19]
    reg d2 : UInt<1>, clock @[Debounce.scala 11:19]
    d2 <= d1 @[Debounce.scala 11:19]
    node _T_11 = not(d2) @[Debounce.scala 13:19]
    node _T_12 = and(d1, _T_11) @[Debounce.scala 13:16]
    io.out <= _T_12 @[Debounce.scala 13:10]
    
  module Debounce_4 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<1>, out : UInt<1>}
    
    reg d1 : UInt<1>, clock @[Debounce.scala 10:19]
    d1 <= io.in @[Debounce.scala 10:19]
    reg d2 : UInt<1>, clock @[Debounce.scala 11:19]
    d2 <= d1 @[Debounce.scala 11:19]
    node _T_11 = not(d2) @[Debounce.scala 13:19]
    node _T_12 = and(d1, _T_11) @[Debounce.scala 13:16]
    io.out <= _T_12 @[Debounce.scala 13:10]
    
  module RegisterFile : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip ReadAddr1 : UInt<5>, flip ReadAddr2 : UInt<5>, flip WriteEnable : UInt<1>, flip WriteAddr : UInt<5>, flip WriteData : UInt<32>, ReadData1 : UInt<32>, ReadData2 : UInt<32>, flip _DebugAddr : UInt<5>, _DebugData : UInt<32>}
    
    wire _T_58 : UInt<32>[32] @[RegisterFile.scala 19:32]
    _T_58[0] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[1] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[2] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[3] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[4] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[5] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[6] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[7] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[8] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[9] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[10] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[11] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[12] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[13] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[14] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[15] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[16] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[17] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[18] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[19] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[20] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[21] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[22] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[23] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[24] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[25] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[26] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[27] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[28] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[29] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[30] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    _T_58[31] <= UInt<32>("h00") @[RegisterFile.scala 19:32]
    reg RegFile : UInt<32>[32], clock with : (reset => (reset, _T_58)) @[RegisterFile.scala 19:24]
    when io.WriteEnable : @[RegisterFile.scala 21:24]
      node _T_262 = neq(io.WriteAddr, UInt<1>("h00")) @[RegisterFile.scala 22:23]
      when _T_262 : @[RegisterFile.scala 22:32]
        RegFile[io.WriteAddr] <= io.WriteData @[RegisterFile.scala 23:29]
        skip @[RegisterFile.scala 22:32]
      skip @[RegisterFile.scala 21:24]
    node _T_267 = neq(io.ReadAddr1, UInt<1>("h00")) @[RegisterFile.scala 27:21]
    when _T_267 : @[RegisterFile.scala 27:30]
      io.ReadData1 <= RegFile[io.ReadAddr1] @[RegisterFile.scala 28:18]
      skip @[RegisterFile.scala 27:30]
    else : @[RegisterFile.scala 29:16]
      io.ReadData1 <= UInt<1>("h00") @[RegisterFile.scala 30:18]
      skip @[RegisterFile.scala 29:16]
    node _T_273 = neq(io.ReadAddr2, UInt<1>("h00")) @[RegisterFile.scala 33:21]
    when _T_273 : @[RegisterFile.scala 33:30]
      io.ReadData2 <= RegFile[io.ReadAddr2] @[RegisterFile.scala 34:18]
      skip @[RegisterFile.scala 33:30]
    else : @[RegisterFile.scala 35:16]
      io.ReadData2 <= UInt<1>("h00") @[RegisterFile.scala 36:18]
      skip @[RegisterFile.scala 35:16]
    io._DebugData <= RegFile[io._DebugAddr] @[RegisterFile.scala 40:17]
    
  module ALU : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip ALUCtl : UInt<4>, flip ALUOp1 : SInt<32>, flip ALUOp2 : SInt<32>, ALUOut : SInt<32>, Zero : UInt<1>}
    
    node _T_17 = and(io.ALUOp1, io.ALUOp2) @[ALU.scala 22:17]
    node _T_18 = asSInt(_T_17) @[ALU.scala 22:17]
    node _T_20 = or(io.ALUOp1, io.ALUOp2) @[ALU.scala 22:36]
    node _T_21 = asSInt(_T_20) @[ALU.scala 22:36]
    node _T_23 = add(io.ALUOp1, io.ALUOp2) @[ALU.scala 22:56]
    node _T_24 = tail(_T_23, 1) @[ALU.scala 22:56]
    node _T_25 = asSInt(_T_24) @[ALU.scala 22:56]
    node _T_27 = sub(io.ALUOp1, io.ALUOp2) @[ALU.scala 23:17]
    node _T_28 = tail(_T_27, 1) @[ALU.scala 23:17]
    node _T_29 = asSInt(_T_28) @[ALU.scala 23:17]
    node _T_32 = lt(io.ALUOp1, io.ALUOp2) @[ALU.scala 23:51]
    node _T_33 = asUInt(asSInt(UInt<31>("h00"))) @[Cat.scala 30:58]
    node _T_34 = cat(_T_33, _T_32) @[Cat.scala 30:58]
    node _T_35 = asSInt(_T_34) @[ALU.scala 23:58]
    node _T_37 = xor(io.ALUOp1, io.ALUOp2) @[ALU.scala 24:17]
    node _T_38 = asSInt(_T_37) @[ALU.scala 24:17]
    node _T_40 = or(io.ALUOp1, io.ALUOp2) @[ALU.scala 24:38]
    node _T_41 = asSInt(_T_40) @[ALU.scala 24:38]
    node _T_42 = not(_T_41) @[ALU.scala 24:32]
    node _T_43 = asSInt(_T_42) @[ALU.scala 24:32]
    node _T_44 = eq(UInt<4>("h0c"), io.ALUCtl) @[Mux.scala 46:19]
    node _T_45 = mux(_T_44, _T_43, asSInt(UInt<1>("h00"))) @[Mux.scala 46:16]
    node _T_46 = eq(UInt<4>("h0a"), io.ALUCtl) @[Mux.scala 46:19]
    node _T_47 = mux(_T_46, _T_38, _T_45) @[Mux.scala 46:16]
    node _T_48 = eq(UInt<3>("h07"), io.ALUCtl) @[Mux.scala 46:19]
    node _T_49 = mux(_T_48, _T_35, _T_47) @[Mux.scala 46:16]
    node _T_50 = eq(UInt<3>("h06"), io.ALUCtl) @[Mux.scala 46:19]
    node _T_51 = mux(_T_50, _T_29, _T_49) @[Mux.scala 46:16]
    node _T_52 = eq(UInt<2>("h02"), io.ALUCtl) @[Mux.scala 46:19]
    node _T_53 = mux(_T_52, _T_25, _T_51) @[Mux.scala 46:16]
    node _T_54 = eq(UInt<1>("h01"), io.ALUCtl) @[Mux.scala 46:19]
    node _T_55 = mux(_T_54, _T_21, _T_53) @[Mux.scala 46:16]
    node _T_56 = eq(UInt<1>("h00"), io.ALUCtl) @[Mux.scala 46:19]
    node _T_57 = mux(_T_56, _T_18, _T_55) @[Mux.scala 46:16]
    io.ALUOut <= _T_57 @[ALU.scala 21:13]
    node _T_59 = eq(io.ALUOut, asSInt(UInt<1>("h00"))) @[ALU.scala 27:24]
    io.Zero <= _T_59 @[ALU.scala 27:11]
    
  module SignedExtend : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<16>, out : SInt<32>}
    
    io.out <= io.in @[SignedExtend.scala 11:10]
    
  module Memory : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<32>, flip d : UInt<32>, flip dpra : UInt<32>, flip we : UInt<1>, spo : UInt<32>, dpo : UInt<32>}
    
    cmem mem : UInt<32>[256] @[Memory.scala 15:16]
    when io.we : @[Memory.scala 17:15]
      node _T_19 = bits(io.a, 9, 2) @[Memory.scala 18:19]
      write mport _T_20 = mem[_T_19], clock
      _T_20 <= io.d
      skip @[Memory.scala 17:15]
    node _T_21 = bits(io.a, 9, 2) @[Memory.scala 21:26]
    read mport _T_22 = mem[_T_21], clock @[Memory.scala 21:21]
    io.spo <= _T_22 @[Memory.scala 21:10]
    node _T_23 = bits(io.dpra, 9, 2) @[Memory.scala 22:29]
    read mport _T_24 = mem[_T_23], clock @[Memory.scala 22:21]
    io.dpo <= _T_24 @[Memory.scala 22:10]
    
  module VMem : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<32>, flip dpra : UInt<32>, flip d : UInt<32>, flip we : UInt<1>, spo : UInt<32>, dpo : UInt<32>}
    
    cmem mem : UInt<32>[8192] @[VMem.scala 15:16]
    when io.we : @[VMem.scala 17:15]
      node _T_19 = bits(io.a, 12, 0)
      write mport _T_20 = mem[_T_19], clock
      _T_20 <= io.d
      skip @[VMem.scala 17:15]
    node _T_21 = bits(io.a, 12, 0) @[VMem.scala 21:21]
    read mport _T_22 = mem[_T_21], clock @[VMem.scala 21:21]
    io.spo <= _T_22 @[VMem.scala 21:10]
    node _T_23 = bits(io.dpra, 9, 2) @[VMem.scala 22:29]
    read mport _T_24 = mem[_T_23], clock @[VMem.scala 22:21]
    io.dpo <= _T_24 @[VMem.scala 22:10]
    
  module MemoryControl : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip Addr : UInt<32>, flip WriteData : UInt<32>, flip WE : UInt<1>, flip SizeSel : UInt<1>, flip Switches : UInt<12>, flip Buttons : UInt<4>, flip Paint : UInt<1>, ReadData : UInt<32>, flip VAddr : UInt<16>, VData : UInt<12>, flip _DebugAddr : UInt<32>, _DebugData : UInt<32>}
    
    inst MainMemory of Memory @[MemoryControl.scala 23:26]
    MainMemory.clock <= clock
    MainMemory.reset <= reset
    inst VMem of VMem @[MemoryControl.scala 24:20]
    VMem.clock <= clock
    VMem.reset <= reset
    wire ReadWord : UInt<32> @[MemoryControl.scala 26:22]
    node WordAddr = bits(io.Addr, 31, 2) @[MemoryControl.scala 27:25]
    wire WriteWord : UInt<32> @[MemoryControl.scala 28:23]
    MainMemory.io.we <= UInt<1>("h00") @[MemoryControl.scala 29:20]
    VMem.io.we <= UInt<1>("h00") @[MemoryControl.scala 30:14]
    MainMemory.io.a <= WordAddr @[MemoryControl.scala 31:19]
    node _T_34 = sub(WordAddr, UInt<9>("h0100")) @[MemoryControl.scala 32:25]
    node _T_35 = asUInt(_T_34) @[MemoryControl.scala 32:25]
    node _T_36 = tail(_T_35, 1) @[MemoryControl.scala 32:25]
    VMem.io.a <= _T_36 @[MemoryControl.scala 32:13]
    MainMemory.io.d <= WriteWord @[MemoryControl.scala 33:19]
    VMem.io.d <= WriteWord @[MemoryControl.scala 34:13]
    node _T_37 = bits(io.VAddr, 15, 1) @[MemoryControl.scala 36:27]
    VMem.io.dpra <= _T_37 @[MemoryControl.scala 36:16]
    node _T_38 = bits(io.VAddr, 0, 0) @[MemoryControl.scala 37:27]
    node _T_39 = bits(VMem.io.dpo, 27, 16) @[MemoryControl.scala 37:42]
    node _T_40 = bits(VMem.io.dpo, 11, 0) @[MemoryControl.scala 37:62]
    node _T_41 = mux(_T_38, _T_39, _T_40) @[MemoryControl.scala 37:18]
    io.VData <= _T_41 @[MemoryControl.scala 37:12]
    reg Switches : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[MemoryControl.scala 39:25]
    reg _T_45 : UInt, clock @[MemoryControl.scala 40:22]
    _T_45 <= io.Switches @[MemoryControl.scala 40:22]
    Switches <= _T_45 @[MemoryControl.scala 40:12]
    reg Buttons : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[MemoryControl.scala 42:24]
    node _T_49 = neq(io.Buttons, UInt<1>("h00")) @[MemoryControl.scala 43:20]
    when _T_49 : @[MemoryControl.scala 43:25]
      Buttons <= io.Buttons @[MemoryControl.scala 44:13]
      skip @[MemoryControl.scala 43:25]
    reg Paint : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[MemoryControl.scala 47:22]
    reg _T_53 : UInt<1>, clock @[MemoryControl.scala 48:19]
    _T_53 <= io.Paint @[MemoryControl.scala 48:19]
    Paint <= _T_53 @[MemoryControl.scala 48:9]
    node _T_56 = eq(WordAddr, UInt<30>("h03fffffff")) @[MemoryControl.scala 50:18]
    when _T_56 : @[MemoryControl.scala 50:43]
      ReadWord <= Switches @[MemoryControl.scala 51:14]
      when io.WE : @[MemoryControl.scala 52:18]
        Switches <= io.WriteData @[MemoryControl.scala 53:16]
        skip @[MemoryControl.scala 52:18]
      skip @[MemoryControl.scala 50:43]
    else : @[MemoryControl.scala 55:50]
      node _T_59 = eq(WordAddr, UInt<30>("h03ffffffe")) @[MemoryControl.scala 55:25]
      when _T_59 : @[MemoryControl.scala 55:50]
        ReadWord <= Buttons @[MemoryControl.scala 56:14]
        when io.WE : @[MemoryControl.scala 57:18]
          Buttons <= io.WriteData @[MemoryControl.scala 58:15]
          skip @[MemoryControl.scala 57:18]
        skip @[MemoryControl.scala 55:50]
      else : @[MemoryControl.scala 60:50]
        node _T_62 = eq(WordAddr, UInt<30>("h03ffffffd")) @[MemoryControl.scala 60:25]
        when _T_62 : @[MemoryControl.scala 60:50]
          ReadWord <= Paint @[MemoryControl.scala 61:14]
          when io.WE : @[MemoryControl.scala 62:18]
            Paint <= io.WriteData @[MemoryControl.scala 63:13]
            skip @[MemoryControl.scala 62:18]
          skip @[MemoryControl.scala 60:50]
        else : @[MemoryControl.scala 65:34]
          node _T_64 = lt(WordAddr, UInt<9>("h0100")) @[MemoryControl.scala 65:25]
          when _T_64 : @[MemoryControl.scala 65:34]
            MainMemory.io.we <= io.WE @[MemoryControl.scala 66:22]
            ReadWord <= MainMemory.io.spo @[MemoryControl.scala 67:14]
            skip @[MemoryControl.scala 65:34]
          else : @[MemoryControl.scala 68:16]
            VMem.io.we <= io.WE @[MemoryControl.scala 69:16]
            ReadWord <= VMem.io.spo @[MemoryControl.scala 70:14]
            skip @[MemoryControl.scala 68:16]
    node _T_66 = eq(io.SizeSel, UInt<1>("h01")) @[MemoryControl.scala 73:20]
    when _T_66 : @[MemoryControl.scala 73:37]
      node _T_67 = bits(io.Addr, 1, 1) @[MemoryControl.scala 74:31]
      node _T_68 = bits(ReadWord, 31, 16) @[MemoryControl.scala 74:43]
      node _T_69 = bits(ReadWord, 15, 0) @[MemoryControl.scala 74:59]
      node _T_70 = mux(_T_67, _T_68, _T_69) @[MemoryControl.scala 74:23]
      io.ReadData <= _T_70 @[MemoryControl.scala 74:17]
      node _T_71 = bits(io.Addr, 1, 1) @[MemoryControl.scala 75:29]
      node _T_72 = bits(io.WriteData, 15, 0) @[MemoryControl.scala 75:49]
      node _T_73 = bits(ReadWord, 15, 0) @[MemoryControl.scala 75:65]
      node _T_74 = cat(_T_72, _T_73) @[Cat.scala 30:58]
      node _T_75 = bits(ReadWord, 31, 16) @[MemoryControl.scala 75:86]
      node _T_76 = bits(io.WriteData, 15, 0) @[MemoryControl.scala 75:107]
      node _T_77 = cat(_T_75, _T_76) @[Cat.scala 30:58]
      node _T_78 = mux(_T_71, _T_74, _T_77) @[MemoryControl.scala 75:21]
      WriteWord <= _T_78 @[MemoryControl.scala 75:15]
      skip @[MemoryControl.scala 73:37]
    else : @[MemoryControl.scala 76:16]
      io.ReadData <= ReadWord @[MemoryControl.scala 77:17]
      WriteWord <= io.WriteData @[MemoryControl.scala 78:15]
      skip @[MemoryControl.scala 76:16]
    MainMemory.io.dpra <= io._DebugAddr @[MemoryControl.scala 81:22]
    io._DebugData <= MainMemory.io.dpo @[MemoryControl.scala 82:17]
    
  module Vga800x600 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {px : UInt<11>, py : UInt<10>, flip vdata : UInt<12>, hs : UInt<1>, vs : UInt<1>, r : UInt<4>, g : UInt<4>, b : UInt<4>}
    
    reg xReg : UInt<11>, clock with : (reset => (reset, UInt<11>("h00"))) @[Vga.scala 17:21]
    reg yReg : UInt<10>, clock with : (reset => (reset, UInt<10>("h00"))) @[Vga.scala 18:21]
    reg hsReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[Vga.scala 19:22]
    reg vsReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[Vga.scala 20:22]
    node _T_30 = add(xReg, UInt<1>("h01")) @[Vga.scala 22:16]
    node _T_31 = tail(_T_30, 1) @[Vga.scala 22:16]
    xReg <= _T_31 @[Vga.scala 22:8]
    node _T_33 = eq(xReg, UInt<11>("h0410")) @[Vga.scala 23:14]
    when _T_33 : @[Vga.scala 23:26]
      node _T_35 = add(yReg, UInt<1>("h01")) @[Vga.scala 24:18]
      node _T_36 = tail(_T_35, 1) @[Vga.scala 24:18]
      yReg <= _T_36 @[Vga.scala 24:10]
      xReg <= UInt<1>("h00") @[Vga.scala 25:10]
      skip @[Vga.scala 23:26]
    node _T_39 = eq(yReg, UInt<10>("h029a")) @[Vga.scala 27:14]
    when _T_39 : @[Vga.scala 27:25]
      yReg <= UInt<1>("h00") @[Vga.scala 28:10]
      skip @[Vga.scala 27:25]
    node _T_42 = eq(xReg, UInt<10>("h0358")) @[Vga.scala 30:14]
    when _T_42 : @[Vga.scala 30:25]
      hsReg <= UInt<1>("h00") @[Vga.scala 31:11]
      skip @[Vga.scala 30:25]
    node _T_45 = eq(xReg, UInt<10>("h03d0")) @[Vga.scala 33:14]
    when _T_45 : @[Vga.scala 33:25]
      hsReg <= UInt<1>("h01") @[Vga.scala 34:11]
      skip @[Vga.scala 33:25]
    node _T_48 = eq(yReg, UInt<10>("h027d")) @[Vga.scala 36:14]
    when _T_48 : @[Vga.scala 36:25]
      vsReg <= UInt<1>("h00") @[Vga.scala 37:11]
      skip @[Vga.scala 36:25]
    node _T_51 = eq(yReg, UInt<10>("h0283")) @[Vga.scala 39:14]
    when _T_51 : @[Vga.scala 39:25]
      vsReg <= UInt<1>("h01") @[Vga.scala 40:11]
      skip @[Vga.scala 39:25]
    io.px <= xReg @[Vga.scala 43:9]
    io.py <= yReg @[Vga.scala 44:9]
    node _T_53 = bits(io.vdata, 11, 8) @[Vga.scala 45:19]
    io.r <= _T_53 @[Vga.scala 45:8]
    node _T_54 = bits(io.vdata, 7, 4) @[Vga.scala 46:19]
    io.g <= _T_54 @[Vga.scala 46:8]
    node _T_55 = bits(io.vdata, 3, 0) @[Vga.scala 47:19]
    io.b <= _T_55 @[Vga.scala 47:8]
    io.hs <= hsReg @[Vga.scala 48:9]
    io.vs <= vsReg @[Vga.scala 49:9]
    
  module DCU : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip vdata : UInt<12>, vaddr : UInt<16>, r : UInt<4>, g : UInt<4>, b : UInt<4>, hs : UInt<1>, vs : UInt<1>}
    
    reg vaddrReg : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[DisplayControlUnit.scala 20:25]
    inst Vga of Vga800x600 @[DisplayControlUnit.scala 21:19]
    Vga.clock <= clock
    Vga.reset <= reset
    io.r <= Vga.io.r @[DisplayControlUnit.scala 22:8]
    io.g <= Vga.io.g @[DisplayControlUnit.scala 23:8]
    io.b <= Vga.io.b @[DisplayControlUnit.scala 24:8]
    io.hs <= Vga.io.hs @[DisplayControlUnit.scala 25:9]
    io.vs <= Vga.io.vs @[DisplayControlUnit.scala 26:9]
    io.vaddr <= vaddrReg @[DisplayControlUnit.scala 27:12]
    node _T_22 = leq(Vga.io.px, UInt<9>("h0150")) @[DisplayControlUnit.scala 29:18]
    node _T_24 = geq(Vga.io.px, UInt<9>("h01d0")) @[DisplayControlUnit.scala 29:39]
    node _T_25 = or(_T_22, _T_24) @[DisplayControlUnit.scala 29:27]
    node _T_27 = leq(Vga.io.py, UInt<8>("h0ec")) @[DisplayControlUnit.scala 29:59]
    node _T_28 = or(_T_25, _T_27) @[DisplayControlUnit.scala 29:47]
    node _T_30 = geq(Vga.io.py, UInt<9>("h016c")) @[DisplayControlUnit.scala 29:80]
    node _T_31 = or(_T_28, _T_30) @[DisplayControlUnit.scala 29:68]
    when _T_31 : @[DisplayControlUnit.scala 29:90]
      Vga.io.vdata <= UInt<1>("h00") @[DisplayControlUnit.scala 30:18]
      skip @[DisplayControlUnit.scala 29:90]
    else : @[DisplayControlUnit.scala 35:14]
      node _T_34 = sub(Vga.io.py, UInt<8>("h0ec")) @[DisplayControlUnit.scala 36:32]
      node _T_35 = asUInt(_T_34) @[DisplayControlUnit.scala 36:32]
      node _T_36 = tail(_T_35, 1) @[DisplayControlUnit.scala 36:32]
      node _T_37 = bits(_T_36, 6, 0) @[DisplayControlUnit.scala 36:40]
      node _T_39 = sub(Vga.io.px, UInt<9>("h0150")) @[DisplayControlUnit.scala 36:58]
      node _T_40 = asUInt(_T_39) @[DisplayControlUnit.scala 36:58]
      node _T_41 = tail(_T_40, 1) @[DisplayControlUnit.scala 36:58]
      node _T_42 = bits(_T_41, 6, 0) @[DisplayControlUnit.scala 36:66]
      node _T_43 = cat(_T_37, _T_42) @[Cat.scala 30:58]
      vaddrReg <= _T_43 @[DisplayControlUnit.scala 36:14]
      Vga.io.vdata <= io.vdata @[DisplayControlUnit.scala 37:18]
      skip @[DisplayControlUnit.scala 35:14]
    
  module DataPath : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip PCWrite : UInt<1>, flip PCWriteCond : UInt<1>, flip PCSrc : UInt<2>, flip IRWrite : UInt<1>, flip InstructionOrData : UInt<1>, flip RegDst : UInt<1>, flip MemOrALUOut : UInt<1>, flip MemWrite : UInt<1>, flip ALUSrc1 : UInt<1>, flip ALUSrc2 : UInt<2>, flip ALUCtl : UInt<4>, flip RegWrite : UInt<1>, flip BeqOrBne : UInt<1>, flip SignedOrZero : UInt<1>, flip SizeSel : UInt<1>, flip Switches : UInt<12>, flip Buttons : UInt<4>, flip Paint : UInt<1>, Zero : UInt<1>, OpCode : UInt<6>, Funct : UInt<6>, flip VGAClock : Clock, hs : UInt<1>, vs : UInt<1>, r : UInt<4>, g : UInt<4>, b : UInt<4>, flip _DebugAddr : UInt<12>, _DebugRegData : UInt<32>, _DebugMemData : UInt<32>, _PC : UInt<32>}
    
    inst RegFile of RegisterFile @[DataPath.scala 46:23]
    RegFile.clock <= clock
    RegFile.reset <= reset
    inst ALU of ALU @[DataPath.scala 47:19]
    ALU.clock <= clock
    ALU.reset <= reset
    inst SignedExtend of SignedExtend @[DataPath.scala 48:28]
    SignedExtend.clock <= clock
    SignedExtend.reset <= reset
    inst Memory of MemoryControl @[DataPath.scala 49:22]
    Memory.clock <= clock
    Memory.reset <= reset
    reg PCReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[DataPath.scala 51:22]
    reg RegRead1Reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[DataPath.scala 52:28]
    reg RegRead2Reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[DataPath.scala 53:28]
    reg ALUOut : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[DataPath.scala 56:23]
    ALUOut <= ALU.io.ALUOut @[DataPath.scala 57:10]
    node _T_75 = asUInt(ALUOut) @[DataPath.scala 60:57]
    node MemAddr = mux(io.InstructionOrData, PCReg, _T_75) @[DataPath.scala 60:20]
    Memory.io.Addr <= MemAddr @[DataPath.scala 61:18]
    Memory.io.WE <= io.MemWrite @[DataPath.scala 62:16]
    Memory.io.WriteData <= RegRead2Reg @[DataPath.scala 63:23]
    Memory.io.SizeSel <= io.SizeSel @[DataPath.scala 64:21]
    reg MemDataReg : UInt, clock @[DataPath.scala 65:27]
    MemDataReg <= Memory.io.ReadData @[DataPath.scala 65:27]
    RegRead1Reg <= RegFile.io.ReadData1 @[DataPath.scala 68:15]
    RegRead2Reg <= RegFile.io.ReadData2 @[DataPath.scala 69:15]
    reg InstructionReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[DataPath.scala 72:31]
    node OpCode = bits(InstructionReg, 31, 26) @[DataPath.scala 73:30]
    node RS = bits(InstructionReg, 25, 21) @[DataPath.scala 74:26]
    node RT = bits(InstructionReg, 20, 16) @[DataPath.scala 75:26]
    node RD = bits(InstructionReg, 15, 11) @[DataPath.scala 76:26]
    node Immediate = bits(InstructionReg, 15, 0) @[DataPath.scala 77:33]
    node Funct = bits(InstructionReg, 5, 0) @[DataPath.scala 78:29]
    node JumpAddr = bits(InstructionReg, 25, 0) @[DataPath.scala 79:32]
    when io.IRWrite : @[DataPath.scala 80:20]
      InstructionReg <= Memory.io.ReadData @[DataPath.scala 80:37]
      skip @[DataPath.scala 80:20]
    node BeqOffset = shl(SignedExtend.io.out, 2) @[DataPath.scala 83:39]
    node _T_79 = not(ALU.io.Zero) @[DataPath.scala 86:71]
    node _T_80 = mux(io.BeqOrBne, ALU.io.Zero, _T_79) @[DataPath.scala 86:44]
    node _T_81 = and(io.PCWriteCond, _T_80) @[DataPath.scala 86:39]
    node PCWriteEnable = or(_T_81, io.PCWrite) @[DataPath.scala 86:86]
    when PCWriteEnable : @[DataPath.scala 87:24]
      node _T_85 = add(PCReg, UInt<3>("h04")) @[DataPath.scala 89:27]
      node _T_86 = tail(_T_85, 1) @[DataPath.scala 89:27]
      node _T_88 = asUInt(ALUOut) @[DataPath.scala 89:56]
      node _T_90 = bits(PCReg, 31, 28) @[DataPath.scala 90:31]
      node _T_91 = shl(JumpAddr, 2) @[DataPath.scala 90:49]
      node _T_92 = cat(_T_90, _T_91) @[Cat.scala 30:58]
      node _T_93 = eq(UInt<1>("h01"), io.PCSrc) @[Mux.scala 46:19]
      node _T_94 = mux(_T_93, _T_92, UInt<1>("h00")) @[Mux.scala 46:16]
      node _T_95 = eq(UInt<2>("h02"), io.PCSrc) @[Mux.scala 46:19]
      node _T_96 = mux(_T_95, _T_88, _T_94) @[Mux.scala 46:16]
      node _T_97 = eq(UInt<1>("h00"), io.PCSrc) @[Mux.scala 46:19]
      node _T_98 = mux(_T_97, _T_86, _T_96) @[Mux.scala 46:16]
      PCReg <= _T_98 @[DataPath.scala 88:11]
      skip @[DataPath.scala 87:24]
    RegFile.io.ReadAddr1 <= RS @[DataPath.scala 95:24]
    RegFile.io.ReadAddr2 <= RT @[DataPath.scala 96:24]
    node _T_102 = eq(UInt<1>("h01"), io.RegDst) @[Mux.scala 46:19]
    node _T_103 = mux(_T_102, RD, UInt<1>("h00")) @[Mux.scala 46:16]
    node _T_104 = eq(UInt<1>("h00"), io.RegDst) @[Mux.scala 46:19]
    node _T_105 = mux(_T_104, RT, _T_103) @[Mux.scala 46:16]
    RegFile.io.WriteAddr <= _T_105 @[DataPath.scala 97:24]
    node _T_108 = asUInt(ALUOut) @[DataPath.scala 101:25]
    node _T_110 = eq(UInt<1>("h01"), io.MemOrALUOut) @[Mux.scala 46:19]
    node _T_111 = mux(_T_110, MemDataReg, UInt<1>("h00")) @[Mux.scala 46:16]
    node _T_112 = eq(UInt<1>("h00"), io.MemOrALUOut) @[Mux.scala 46:19]
    node _T_113 = mux(_T_112, _T_108, _T_111) @[Mux.scala 46:16]
    RegFile.io.WriteData <= _T_113 @[DataPath.scala 100:24]
    RegFile.io.WriteEnable <= io.RegWrite @[DataPath.scala 103:26]
    node _T_114 = asSInt(Immediate) @[DataPath.scala 106:35]
    SignedExtend.io.in <= _T_114 @[DataPath.scala 106:22]
    ALU.io.ALUCtl <= io.ALUCtl @[DataPath.scala 109:17]
    io.Zero <= ALU.io.Zero @[DataPath.scala 110:11]
    node _T_117 = asSInt(RegRead1Reg) @[DataPath.scala 112:32]
    node _T_119 = asSInt(PCReg) @[DataPath.scala 112:58]
    node _T_120 = eq(UInt<1>("h00"), io.ALUSrc1) @[Mux.scala 46:19]
    node _T_121 = mux(_T_120, _T_119, asSInt(UInt<1>("h00"))) @[Mux.scala 46:16]
    node _T_122 = eq(UInt<1>("h01"), io.ALUSrc1) @[Mux.scala 46:19]
    node _T_123 = mux(_T_122, _T_117, _T_121) @[Mux.scala 46:16]
    ALU.io.ALUOp1 <= _T_123 @[DataPath.scala 111:17]
    node _T_125 = asSInt(RegRead2Reg) @[DataPath.scala 115:32]
    node _T_128 = cat(UInt<16>("h00"), Immediate) @[Cat.scala 30:58]
    node _T_129 = asSInt(_T_128) @[DataPath.scala 116:89]
    node _T_130 = mux(io.SignedOrZero, SignedExtend.io.out, _T_129) @[DataPath.scala 116:24]
    node _T_132 = eq(UInt<2>("h03"), io.ALUSrc2) @[Mux.scala 46:19]
    node _T_133 = mux(_T_132, BeqOffset, SignedExtend.io.out) @[Mux.scala 46:16]
    node _T_134 = eq(UInt<2>("h02"), io.ALUSrc2) @[Mux.scala 46:19]
    node _T_135 = mux(_T_134, _T_130, _T_133) @[Mux.scala 46:16]
    node _T_136 = eq(UInt<1>("h00"), io.ALUSrc2) @[Mux.scala 46:19]
    node _T_137 = mux(_T_136, _T_125, _T_135) @[Mux.scala 46:16]
    ALU.io.ALUOp2 <= _T_137 @[DataPath.scala 114:17]
    io.OpCode <= OpCode @[DataPath.scala 120:13]
    io.Funct <= Funct @[DataPath.scala 121:12]
    Memory.io.Switches <= io.Switches @[DataPath.scala 124:22]
    Memory.io.Buttons <= io.Buttons @[DataPath.scala 125:21]
    Memory.io.Paint <= io.Paint @[DataPath.scala 126:19]
    inst DCU of DCU @[DataPath.scala 129:44]
    DCU.clock <= io.VGAClock
    DCU.reset <= reset
    DCU.io.vdata <= Memory.io.VData @[DataPath.scala 130:16]
    Memory.io.VAddr <= DCU.io.vaddr @[DataPath.scala 131:19]
    io.hs <= DCU.io.hs @[DataPath.scala 132:9]
    io.vs <= DCU.io.vs @[DataPath.scala 133:9]
    io.r <= DCU.io.r @[DataPath.scala 134:8]
    io.g <= DCU.io.g @[DataPath.scala 135:8]
    io.b <= DCU.io.b @[DataPath.scala 136:8]
    Memory.io._DebugAddr <= io._DebugAddr @[DataPath.scala 139:24]
    io._DebugMemData <= Memory.io._DebugData @[DataPath.scala 140:20]
    RegFile.io._DebugAddr <= io._DebugAddr @[DataPath.scala 141:25]
    io._DebugRegData <= RegFile.io._DebugData @[DataPath.scala 142:20]
    io._PC <= PCReg @[DataPath.scala 143:10]
    
  module ControlUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip Zero : UInt<1>, flip OpCode : UInt<6>, PCWrite : UInt<1>, PCWriteCond : UInt<1>, PCSrc : UInt<2>, IRWrite : UInt<1>, InstructionOrData : UInt<1>, RegDst : UInt<1>, MemOrALUOut : UInt<1>, MemWrite : UInt<1>, ALUOp : UInt<2>, ALUSrc1 : UInt<1>, ALUSrc2 : UInt<2>, RegWrite : UInt<1>, BeqOrBne : UInt<1>, SignedOrZero : UInt<1>, SizeSel : UInt<1>}
    
    io.PCWrite <= UInt<1>("h00") @[ControlUnit.scala 33:14]
    io.PCWriteCond <= UInt<1>("h00") @[ControlUnit.scala 34:18]
    io.PCSrc <= UInt<1>("h00") @[ControlUnit.scala 35:12]
    io.IRWrite <= UInt<1>("h00") @[ControlUnit.scala 36:14]
    io.InstructionOrData <= UInt<1>("h01") @[ControlUnit.scala 37:24]
    wire NextState : UInt<3> @[ControlUnit.scala 39:23]
    reg State : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[ControlUnit.scala 40:22]
    State <= NextState @[ControlUnit.scala 41:9]
    node _T_62 = eq(UInt<2>("h02"), io.OpCode) @[Mux.scala 46:19]
    node _T_63 = mux(_T_62, UInt<1>("h01"), UInt<3>("h04")) @[Mux.scala 46:16]
    node _T_64 = eq(UInt<3>("h05"), io.OpCode) @[Mux.scala 46:19]
    node _T_65 = mux(_T_64, UInt<1>("h01"), _T_63) @[Mux.scala 46:16]
    node _T_66 = eq(UInt<3>("h04"), io.OpCode) @[Mux.scala 46:19]
    node _T_67 = mux(_T_66, UInt<1>("h01"), _T_65) @[Mux.scala 46:16]
    node _T_86 = eq(UInt<6>("h029"), io.OpCode) @[Mux.scala 46:19]
    node _T_87 = mux(_T_86, UInt<1>("h01"), UInt<3>("h05")) @[Mux.scala 46:16]
    node _T_88 = eq(UInt<6>("h02b"), io.OpCode) @[Mux.scala 46:19]
    node _T_89 = mux(_T_88, UInt<1>("h01"), _T_87) @[Mux.scala 46:16]
    node _T_90 = eq(UInt<4>("h0a"), io.OpCode) @[Mux.scala 46:19]
    node _T_91 = mux(_T_90, UInt<1>("h01"), _T_89) @[Mux.scala 46:16]
    node _T_92 = eq(UInt<4>("h0e"), io.OpCode) @[Mux.scala 46:19]
    node _T_93 = mux(_T_92, UInt<1>("h01"), _T_91) @[Mux.scala 46:16]
    node _T_94 = eq(UInt<4>("h0d"), io.OpCode) @[Mux.scala 46:19]
    node _T_95 = mux(_T_94, UInt<1>("h01"), _T_93) @[Mux.scala 46:16]
    node _T_96 = eq(UInt<4>("h08"), io.OpCode) @[Mux.scala 46:19]
    node _T_97 = mux(_T_96, UInt<1>("h01"), _T_95) @[Mux.scala 46:16]
    node _T_98 = eq(UInt<4>("h0c"), io.OpCode) @[Mux.scala 46:19]
    node _T_99 = mux(_T_98, UInt<1>("h01"), _T_97) @[Mux.scala 46:16]
    node _T_100 = eq(UInt<1>("h00"), io.OpCode) @[Mux.scala 46:19]
    node _T_101 = mux(_T_100, UInt<1>("h01"), _T_99) @[Mux.scala 46:16]
    node _T_104 = eq(UInt<3>("h05"), State) @[Mux.scala 46:19]
    node _T_105 = mux(_T_104, UInt<1>("h01"), UInt<3>("h00")) @[Mux.scala 46:16]
    node _T_106 = eq(UInt<3>("h04"), State) @[Mux.scala 46:19]
    node _T_107 = mux(_T_106, _T_101, _T_105) @[Mux.scala 46:16]
    node _T_108 = eq(UInt<2>("h03"), State) @[Mux.scala 46:19]
    node _T_109 = mux(_T_108, _T_67, _T_107) @[Mux.scala 46:16]
    node _T_110 = eq(UInt<2>("h02"), State) @[Mux.scala 46:19]
    node _T_111 = mux(_T_110, UInt<2>("h03"), _T_109) @[Mux.scala 46:16]
    node _T_112 = eq(UInt<1>("h01"), State) @[Mux.scala 46:19]
    node _T_113 = mux(_T_112, UInt<2>("h02"), _T_111) @[Mux.scala 46:16]
    node _T_114 = eq(UInt<3>("h00"), State) @[Mux.scala 46:19]
    node _T_115 = mux(_T_114, UInt<1>("h01"), _T_113) @[Mux.scala 46:16]
    NextState <= _T_115 @[ControlUnit.scala 44:13]
    io.PCWrite <= UInt<1>("h00") @[ControlUnit.scala 54:16]
    io.PCWriteCond <= UInt<1>("h00") @[ControlUnit.scala 55:20]
    io.PCSrc <= UInt<1>("h00") @[ControlUnit.scala 56:14]
    io.IRWrite <= UInt<1>("h00") @[ControlUnit.scala 57:16]
    io.InstructionOrData <= UInt<1>("h01") @[ControlUnit.scala 58:26]
    io.RegDst <= UInt<1>("h01") @[ControlUnit.scala 59:15]
    io.MemOrALUOut <= UInt<1>("h00") @[ControlUnit.scala 60:20]
    io.MemWrite <= UInt<1>("h00") @[ControlUnit.scala 61:17]
    io.ALUOp <= UInt<1>("h00") @[ControlUnit.scala 62:14]
    io.ALUSrc1 <= UInt<1>("h00") @[ControlUnit.scala 63:16]
    io.ALUSrc2 <= UInt<2>("h02") @[ControlUnit.scala 64:16]
    io.RegWrite <= UInt<1>("h00") @[ControlUnit.scala 65:17]
    io.BeqOrBne <= UInt<1>("h01") @[ControlUnit.scala 66:17]
    io.SignedOrZero <= UInt<1>("h01") @[ControlUnit.scala 67:21]
    io.SizeSel <= UInt<1>("h00") @[ControlUnit.scala 68:16]
    node _T_132 = eq(UInt<1>("h01"), State) @[Conditional.scala 37:30]
    when _T_132 : @[Conditional.scala 40:58]
      io.PCWrite <= UInt<1>("h01") @[ControlUnit.scala 72:20]
      io.PCSrc <= UInt<1>("h00") @[ControlUnit.scala 73:18]
      io.InstructionOrData <= UInt<1>("h01") @[ControlUnit.scala 74:30]
      io.IRWrite <= UInt<1>("h01") @[ControlUnit.scala 75:20]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_138 = eq(UInt<2>("h02"), State) @[Conditional.scala 37:30]
      when _T_138 : @[Conditional.scala 39:67]
        io.ALUOp <= UInt<1>("h00") @[ControlUnit.scala 78:18]
        io.ALUSrc1 <= UInt<1>("h00") @[ControlUnit.scala 79:20]
        io.ALUSrc2 <= UInt<2>("h03") @[ControlUnit.scala 80:20]
        io.SignedOrZero <= UInt<1>("h01") @[ControlUnit.scala 81:25]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_144 = eq(UInt<2>("h03"), State) @[Conditional.scala 37:30]
        when _T_144 : @[Conditional.scala 39:67]
          node _T_146 = eq(UInt<1>("h00"), io.OpCode) @[Conditional.scala 37:30]
          when _T_146 : @[Conditional.scala 40:58]
            io.ALUOp <= UInt<2>("h02") @[ControlUnit.scala 86:22]
            io.ALUSrc1 <= UInt<1>("h01") @[ControlUnit.scala 87:24]
            io.ALUSrc2 <= UInt<1>("h00") @[ControlUnit.scala 88:24]
            skip @[Conditional.scala 40:58]
          else : @[Conditional.scala 39:67]
            node _T_151 = eq(UInt<6>("h023"), io.OpCode) @[Conditional.scala 37:30]
            when _T_151 : @[Conditional.scala 39:67]
              io.ALUOp <= UInt<1>("h00") @[ControlUnit.scala 91:22]
              io.ALUSrc1 <= UInt<1>("h01") @[ControlUnit.scala 92:24]
              io.ALUSrc2 <= UInt<2>("h02") @[ControlUnit.scala 93:24]
              io.SizeSel <= UInt<1>("h00") @[ControlUnit.scala 94:24]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_157 = eq(UInt<6>("h021"), io.OpCode) @[Conditional.scala 37:30]
              when _T_157 : @[Conditional.scala 39:67]
                io.ALUOp <= UInt<1>("h00") @[ControlUnit.scala 97:22]
                io.ALUSrc1 <= UInt<1>("h01") @[ControlUnit.scala 98:24]
                io.ALUSrc2 <= UInt<2>("h02") @[ControlUnit.scala 99:24]
                io.SizeSel <= UInt<1>("h01") @[ControlUnit.scala 100:24]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_163 = eq(UInt<6>("h02b"), io.OpCode) @[Conditional.scala 37:30]
                when _T_163 : @[Conditional.scala 39:67]
                  io.ALUOp <= UInt<1>("h00") @[ControlUnit.scala 103:22]
                  io.ALUSrc1 <= UInt<1>("h01") @[ControlUnit.scala 104:24]
                  io.ALUSrc2 <= UInt<2>("h02") @[ControlUnit.scala 105:24]
                  io.SizeSel <= UInt<1>("h00") @[ControlUnit.scala 106:24]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_169 = eq(UInt<6>("h029"), io.OpCode) @[Conditional.scala 37:30]
                  when _T_169 : @[Conditional.scala 39:67]
                    io.ALUOp <= UInt<1>("h00") @[ControlUnit.scala 109:22]
                    io.ALUSrc1 <= UInt<1>("h01") @[ControlUnit.scala 110:24]
                    io.ALUSrc2 <= UInt<2>("h02") @[ControlUnit.scala 111:24]
                    io.SizeSel <= UInt<1>("h01") @[ControlUnit.scala 112:24]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_175 = eq(UInt<3>("h04"), io.OpCode) @[Conditional.scala 37:30]
                    when _T_175 : @[Conditional.scala 39:67]
                      io.BeqOrBne <= UInt<1>("h01") @[ControlUnit.scala 115:25]
                      io.ALUOp <= UInt<1>("h01") @[ControlUnit.scala 116:22]
                      io.PCWriteCond <= UInt<1>("h01") @[ControlUnit.scala 117:28]
                      io.PCSrc <= UInt<2>("h02") @[ControlUnit.scala 118:22]
                      io.ALUSrc1 <= UInt<1>("h01") @[ControlUnit.scala 119:24]
                      io.ALUSrc2 <= UInt<1>("h00") @[ControlUnit.scala 120:24]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_183 = eq(UInt<3>("h05"), io.OpCode) @[Conditional.scala 37:30]
                      when _T_183 : @[Conditional.scala 39:67]
                        io.BeqOrBne <= UInt<1>("h00") @[ControlUnit.scala 123:25]
                        io.ALUOp <= UInt<1>("h01") @[ControlUnit.scala 124:22]
                        io.PCWriteCond <= UInt<1>("h01") @[ControlUnit.scala 125:28]
                        io.PCSrc <= UInt<2>("h02") @[ControlUnit.scala 126:22]
                        io.ALUSrc1 <= UInt<1>("h01") @[ControlUnit.scala 127:24]
                        io.ALUSrc2 <= UInt<1>("h00") @[ControlUnit.scala 128:24]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_191 = eq(UInt<2>("h02"), io.OpCode) @[Conditional.scala 37:30]
                        when _T_191 : @[Conditional.scala 39:67]
                          io.PCWrite <= UInt<1>("h01") @[ControlUnit.scala 131:24]
                          io.PCSrc <= UInt<1>("h01") @[ControlUnit.scala 132:22]
                          skip @[Conditional.scala 39:67]
                        else : @[Conditional.scala 39:67]
                          node _T_195 = eq(UInt<4>("h08"), io.OpCode) @[Conditional.scala 37:30]
                          when _T_195 : @[Conditional.scala 39:67]
                            io.ALUOp <= UInt<2>("h03") @[ControlUnit.scala 135:22]
                            io.ALUSrc1 <= UInt<1>("h01") @[ControlUnit.scala 136:24]
                            io.ALUSrc2 <= UInt<2>("h02") @[ControlUnit.scala 137:24]
                            io.SignedOrZero <= UInt<1>("h01") @[ControlUnit.scala 138:29]
                            skip @[Conditional.scala 39:67]
                          else : @[Conditional.scala 39:67]
                            node _T_201 = eq(UInt<4>("h0c"), io.OpCode) @[Conditional.scala 37:30]
                            when _T_201 : @[Conditional.scala 39:67]
                              io.ALUOp <= UInt<2>("h03") @[ControlUnit.scala 141:22]
                              io.ALUSrc1 <= UInt<1>("h01") @[ControlUnit.scala 142:24]
                              io.ALUSrc2 <= UInt<2>("h02") @[ControlUnit.scala 143:24]
                              io.SignedOrZero <= UInt<1>("h00") @[ControlUnit.scala 144:29]
                              skip @[Conditional.scala 39:67]
                            else : @[Conditional.scala 39:67]
                              node _T_207 = eq(UInt<4>("h0d"), io.OpCode) @[Conditional.scala 37:30]
                              when _T_207 : @[Conditional.scala 39:67]
                                io.ALUOp <= UInt<2>("h03") @[ControlUnit.scala 147:22]
                                io.ALUSrc1 <= UInt<1>("h01") @[ControlUnit.scala 148:24]
                                io.ALUSrc2 <= UInt<2>("h02") @[ControlUnit.scala 149:24]
                                io.SignedOrZero <= UInt<1>("h00") @[ControlUnit.scala 150:29]
                                skip @[Conditional.scala 39:67]
                              else : @[Conditional.scala 39:67]
                                node _T_213 = eq(UInt<4>("h0e"), io.OpCode) @[Conditional.scala 37:30]
                                when _T_213 : @[Conditional.scala 39:67]
                                  io.ALUOp <= UInt<2>("h03") @[ControlUnit.scala 153:22]
                                  io.ALUSrc1 <= UInt<1>("h01") @[ControlUnit.scala 154:24]
                                  io.ALUSrc2 <= UInt<2>("h02") @[ControlUnit.scala 155:24]
                                  io.SignedOrZero <= UInt<1>("h00") @[ControlUnit.scala 156:29]
                                  skip @[Conditional.scala 39:67]
                                else : @[Conditional.scala 39:67]
                                  node _T_219 = eq(UInt<4>("h0a"), io.OpCode) @[Conditional.scala 37:30]
                                  when _T_219 : @[Conditional.scala 39:67]
                                    io.ALUOp <= UInt<2>("h03") @[ControlUnit.scala 159:22]
                                    io.ALUSrc1 <= UInt<1>("h01") @[ControlUnit.scala 160:24]
                                    io.ALUSrc2 <= UInt<2>("h02") @[ControlUnit.scala 161:24]
                                    io.SignedOrZero <= UInt<1>("h01") @[ControlUnit.scala 162:29]
                                    skip @[Conditional.scala 39:67]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_225 = eq(UInt<3>("h04"), State) @[Conditional.scala 37:30]
          when _T_225 : @[Conditional.scala 39:67]
            node _T_227 = eq(UInt<1>("h00"), io.OpCode) @[Conditional.scala 37:30]
            when _T_227 : @[Conditional.scala 40:58]
              io.RegWrite <= UInt<1>("h01") @[ControlUnit.scala 169:25]
              io.RegDst <= UInt<1>("h01") @[ControlUnit.scala 170:23]
              io.MemOrALUOut <= UInt<1>("h00") @[ControlUnit.scala 171:28]
              skip @[Conditional.scala 40:58]
            else : @[Conditional.scala 39:67]
              node _T_232 = eq(UInt<6>("h02b"), io.OpCode) @[Conditional.scala 37:30]
              when _T_232 : @[Conditional.scala 39:67]
                io.InstructionOrData <= UInt<1>("h00") @[ControlUnit.scala 174:34]
                io.MemWrite <= UInt<1>("h01") @[ControlUnit.scala 175:25]
                io.SizeSel <= UInt<1>("h00") @[ControlUnit.scala 176:24]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_237 = eq(UInt<6>("h029"), io.OpCode) @[Conditional.scala 37:30]
                when _T_237 : @[Conditional.scala 39:67]
                  io.InstructionOrData <= UInt<1>("h00") @[ControlUnit.scala 179:34]
                  io.MemWrite <= UInt<1>("h01") @[ControlUnit.scala 180:25]
                  io.SizeSel <= UInt<1>("h01") @[ControlUnit.scala 181:24]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_242 = eq(UInt<6>("h023"), io.OpCode) @[Conditional.scala 37:30]
                  when _T_242 : @[Conditional.scala 39:67]
                    io.InstructionOrData <= UInt<1>("h00") @[ControlUnit.scala 184:34]
                    io.MemOrALUOut <= UInt<1>("h01") @[ControlUnit.scala 185:28]
                    io.SizeSel <= UInt<1>("h00") @[ControlUnit.scala 186:24]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_247 = eq(UInt<6>("h021"), io.OpCode) @[Conditional.scala 37:30]
                    when _T_247 : @[Conditional.scala 39:67]
                      io.InstructionOrData <= UInt<1>("h00") @[ControlUnit.scala 189:34]
                      io.MemOrALUOut <= UInt<1>("h01") @[ControlUnit.scala 190:28]
                      io.SizeSel <= UInt<1>("h01") @[ControlUnit.scala 191:24]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_252 = eq(UInt<4>("h08"), io.OpCode) @[Conditional.scala 37:30]
                      when _T_252 : @[Conditional.scala 39:67]
                        io.RegWrite <= UInt<1>("h01") @[ControlUnit.scala 194:25]
                        io.RegDst <= UInt<1>("h00") @[ControlUnit.scala 195:23]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_256 = eq(UInt<4>("h0c"), io.OpCode) @[Conditional.scala 37:30]
                        when _T_256 : @[Conditional.scala 39:67]
                          io.RegWrite <= UInt<1>("h01") @[ControlUnit.scala 198:25]
                          io.RegDst <= UInt<1>("h00") @[ControlUnit.scala 199:23]
                          skip @[Conditional.scala 39:67]
                        else : @[Conditional.scala 39:67]
                          node _T_260 = eq(UInt<4>("h0d"), io.OpCode) @[Conditional.scala 37:30]
                          when _T_260 : @[Conditional.scala 39:67]
                            io.RegWrite <= UInt<1>("h01") @[ControlUnit.scala 202:25]
                            io.RegDst <= UInt<1>("h00") @[ControlUnit.scala 203:23]
                            skip @[Conditional.scala 39:67]
                          else : @[Conditional.scala 39:67]
                            node _T_264 = eq(UInt<4>("h0e"), io.OpCode) @[Conditional.scala 37:30]
                            when _T_264 : @[Conditional.scala 39:67]
                              io.RegWrite <= UInt<1>("h01") @[ControlUnit.scala 206:25]
                              io.RegDst <= UInt<1>("h00") @[ControlUnit.scala 207:23]
                              skip @[Conditional.scala 39:67]
                            else : @[Conditional.scala 39:67]
                              node _T_268 = eq(UInt<4>("h0a"), io.OpCode) @[Conditional.scala 37:30]
                              when _T_268 : @[Conditional.scala 39:67]
                                io.RegWrite <= UInt<1>("h01") @[ControlUnit.scala 210:25]
                                io.RegDst <= UInt<1>("h00") @[ControlUnit.scala 211:23]
                                skip @[Conditional.scala 39:67]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_272 = eq(UInt<3>("h05"), State) @[Conditional.scala 37:30]
            when _T_272 : @[Conditional.scala 39:67]
              io.MemOrALUOut <= UInt<1>("h01") @[ControlUnit.scala 216:24]
              io.RegWrite <= UInt<1>("h01") @[ControlUnit.scala 217:21]
              io.RegDst <= UInt<1>("h00") @[ControlUnit.scala 218:19]
              skip @[Conditional.scala 39:67]
    
  module ALUControl : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip ALUOp : UInt<2>, flip OpCode : UInt<6>, flip Funct : UInt<6>, ALUCtl : UInt<4>}
    
    node _T_34 = eq(UInt<6>("h027"), io.Funct) @[Mux.scala 46:19]
    node _T_35 = mux(_T_34, UInt<4>("h0c"), UInt<2>("h02")) @[Mux.scala 46:16]
    node _T_36 = eq(UInt<6>("h026"), io.Funct) @[Mux.scala 46:19]
    node _T_37 = mux(_T_36, UInt<4>("h0a"), _T_35) @[Mux.scala 46:16]
    node _T_38 = eq(UInt<6>("h02a"), io.Funct) @[Mux.scala 46:19]
    node _T_39 = mux(_T_38, UInt<3>("h07"), _T_37) @[Mux.scala 46:16]
    node _T_40 = eq(UInt<6>("h025"), io.Funct) @[Mux.scala 46:19]
    node _T_41 = mux(_T_40, UInt<1>("h01"), _T_39) @[Mux.scala 46:16]
    node _T_42 = eq(UInt<6>("h024"), io.Funct) @[Mux.scala 46:19]
    node _T_43 = mux(_T_42, UInt<1>("h00"), _T_41) @[Mux.scala 46:16]
    node _T_44 = eq(UInt<6>("h022"), io.Funct) @[Mux.scala 46:19]
    node _T_45 = mux(_T_44, UInt<3>("h06"), _T_43) @[Mux.scala 46:16]
    node _T_46 = eq(UInt<6>("h020"), io.Funct) @[Mux.scala 46:19]
    node _T_47 = mux(_T_46, UInt<2>("h02"), _T_45) @[Mux.scala 46:16]
    node _T_60 = eq(UInt<4>("h0e"), io.OpCode) @[Mux.scala 46:19]
    node _T_61 = mux(_T_60, UInt<4>("h0a"), UInt<1>("h00")) @[Mux.scala 46:16]
    node _T_62 = eq(UInt<4>("h0a"), io.OpCode) @[Mux.scala 46:19]
    node _T_63 = mux(_T_62, UInt<3>("h07"), _T_61) @[Mux.scala 46:16]
    node _T_64 = eq(UInt<4>("h08"), io.OpCode) @[Mux.scala 46:19]
    node _T_65 = mux(_T_64, UInt<2>("h02"), _T_63) @[Mux.scala 46:16]
    node _T_66 = eq(UInt<4>("h0d"), io.OpCode) @[Mux.scala 46:19]
    node _T_67 = mux(_T_66, UInt<1>("h01"), _T_65) @[Mux.scala 46:16]
    node _T_68 = eq(UInt<4>("h0c"), io.OpCode) @[Mux.scala 46:19]
    node _T_69 = mux(_T_68, UInt<1>("h00"), _T_67) @[Mux.scala 46:16]
    node _T_70 = eq(UInt<2>("h03"), io.ALUOp) @[Mux.scala 46:19]
    node _T_71 = mux(_T_70, _T_69, UInt<2>("h02")) @[Mux.scala 46:16]
    node _T_72 = eq(UInt<2>("h02"), io.ALUOp) @[Mux.scala 46:19]
    node _T_73 = mux(_T_72, _T_47, _T_71) @[Mux.scala 46:16]
    node _T_74 = eq(UInt<1>("h01"), io.ALUOp) @[Mux.scala 46:19]
    node _T_75 = mux(_T_74, UInt<3>("h06"), _T_73) @[Mux.scala 46:16]
    node _T_76 = eq(UInt<1>("h00"), io.ALUOp) @[Mux.scala 46:19]
    node _T_77 = mux(_T_76, UInt<2>("h02"), _T_75) @[Mux.scala 46:16]
    io.ALUCtl <= _T_77 @[ALUControl.scala 19:13]
    
  module SegmentDisplay : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip data : UInt<4>[8], flip en : UInt<8>, seg : UInt<7>, an : UInt<8>}
    
    reg anSig : UInt<8>, clock with : (reset => (reset, UInt<8>("h080"))) @[SegmentDisplay.scala 14:22]
    node _T_40 = neq(anSig, UInt<1>("h01")) @[SegmentDisplay.scala 15:22]
    node _T_41 = shr(anSig, 1) @[SegmentDisplay.scala 15:47]
    node _T_43 = mux(_T_40, _T_41, UInt<8>("h080")) @[SegmentDisplay.scala 15:15]
    anSig <= _T_43 @[SegmentDisplay.scala 15:9]
    reg count : UInt<3>, clock with : (reset => (reset, UInt<3>("h07"))) @[SegmentDisplay.scala 16:22]
    node _T_47 = sub(count, UInt<1>("h01")) @[SegmentDisplay.scala 17:18]
    node _T_48 = asUInt(_T_47) @[SegmentDisplay.scala 17:18]
    node _T_49 = tail(_T_48, 1) @[SegmentDisplay.scala 17:18]
    count <= _T_49 @[SegmentDisplay.scala 17:9]
    node _T_50 = dshr(io.en, count) @[SegmentDisplay.scala 19:22]
    node _T_51 = bits(_T_50, 0, 0) @[SegmentDisplay.scala 19:22]
    node _T_53 = eq(_T_51, UInt<1>("h01")) @[SegmentDisplay.scala 19:30]
    node _T_88 = eq(UInt<4>("h0f"), io.data[count]) @[Mux.scala 46:19]
    node _T_89 = mux(_T_88, UInt<4>("h0e"), UInt<7>("h07f")) @[Mux.scala 46:16]
    node _T_90 = eq(UInt<4>("h0e"), io.data[count]) @[Mux.scala 46:19]
    node _T_91 = mux(_T_90, UInt<3>("h06"), _T_89) @[Mux.scala 46:16]
    node _T_92 = eq(UInt<4>("h0d"), io.data[count]) @[Mux.scala 46:19]
    node _T_93 = mux(_T_92, UInt<6>("h021"), _T_91) @[Mux.scala 46:16]
    node _T_94 = eq(UInt<4>("h0c"), io.data[count]) @[Mux.scala 46:19]
    node _T_95 = mux(_T_94, UInt<7>("h046"), _T_93) @[Mux.scala 46:16]
    node _T_96 = eq(UInt<4>("h0b"), io.data[count]) @[Mux.scala 46:19]
    node _T_97 = mux(_T_96, UInt<2>("h03"), _T_95) @[Mux.scala 46:16]
    node _T_98 = eq(UInt<4>("h0a"), io.data[count]) @[Mux.scala 46:19]
    node _T_99 = mux(_T_98, UInt<4>("h08"), _T_97) @[Mux.scala 46:16]
    node _T_100 = eq(UInt<4>("h09"), io.data[count]) @[Mux.scala 46:19]
    node _T_101 = mux(_T_100, UInt<5>("h010"), _T_99) @[Mux.scala 46:16]
    node _T_102 = eq(UInt<4>("h08"), io.data[count]) @[Mux.scala 46:19]
    node _T_103 = mux(_T_102, UInt<1>("h00"), _T_101) @[Mux.scala 46:16]
    node _T_104 = eq(UInt<3>("h07"), io.data[count]) @[Mux.scala 46:19]
    node _T_105 = mux(_T_104, UInt<7>("h078"), _T_103) @[Mux.scala 46:16]
    node _T_106 = eq(UInt<3>("h06"), io.data[count]) @[Mux.scala 46:19]
    node _T_107 = mux(_T_106, UInt<2>("h02"), _T_105) @[Mux.scala 46:16]
    node _T_108 = eq(UInt<3>("h05"), io.data[count]) @[Mux.scala 46:19]
    node _T_109 = mux(_T_108, UInt<5>("h012"), _T_107) @[Mux.scala 46:16]
    node _T_110 = eq(UInt<3>("h04"), io.data[count]) @[Mux.scala 46:19]
    node _T_111 = mux(_T_110, UInt<5>("h019"), _T_109) @[Mux.scala 46:16]
    node _T_112 = eq(UInt<2>("h03"), io.data[count]) @[Mux.scala 46:19]
    node _T_113 = mux(_T_112, UInt<6>("h030"), _T_111) @[Mux.scala 46:16]
    node _T_114 = eq(UInt<2>("h02"), io.data[count]) @[Mux.scala 46:19]
    node _T_115 = mux(_T_114, UInt<6>("h024"), _T_113) @[Mux.scala 46:16]
    node _T_116 = eq(UInt<1>("h01"), io.data[count]) @[Mux.scala 46:19]
    node _T_117 = mux(_T_116, UInt<7>("h079"), _T_115) @[Mux.scala 46:16]
    node _T_118 = eq(UInt<1>("h00"), io.data[count]) @[Mux.scala 46:19]
    node _T_119 = mux(_T_118, UInt<7>("h040"), _T_117) @[Mux.scala 46:16]
    node _T_121 = mux(_T_53, _T_119, UInt<7>("h07f")) @[SegmentDisplay.scala 19:16]
    io.seg <= _T_121 @[SegmentDisplay.scala 19:10]
    node _T_122 = not(anSig) @[SegmentDisplay.scala 26:12]
    io.an <= _T_122 @[SegmentDisplay.scala 26:9]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip Reset : UInt<1>, flip Switches : UInt<12>, flip Paint : UInt<1>, flip Buttons : UInt<4>, flip RegOrMem : UInt<1>, flip Step : UInt<1>, flip Countinue : UInt<1>, hs : UInt<1>, vs : UInt<1>, r : UInt<4>, g : UInt<4>, b : UInt<4>, AN : UInt<8>, SEG : UInt<7>, PC : UInt<16>}
    
    reg counter1 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Top.scala 29:25]
    node _T_38 = eq(counter1, UInt<18>("h030d3f")) @[Top.scala 30:28]
    node _T_41 = add(counter1, UInt<1>("h01")) @[Top.scala 30:56]
    node _T_42 = tail(_T_41, 1) @[Top.scala 30:56]
    node _T_43 = mux(_T_38, UInt<1>("h00"), _T_42) @[Top.scala 30:18]
    counter1 <= _T_43 @[Top.scala 30:12]
    node _T_45 = leq(counter1, UInt<17>("h01869f")) @[Top.scala 31:33]
    reg clk500 : UInt<1>, clock @[Top.scala 31:23]
    clk500 <= _T_45 @[Top.scala 31:23]
    reg clk50M : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Top.scala 33:23]
    node _T_49 = not(clk50M) @[Top.scala 34:13]
    clk50M <= _T_49 @[Top.scala 34:10]
    inst stable of Debounce @[Top.scala 36:22]
    stable.clock <= clock
    stable.reset <= reset
    stable.io.in <= io.Step @[Top.scala 37:16]
    inst stable0 of Debounce_1 @[Top.scala 38:23]
    stable0.clock <= clock
    stable0.reset <= reset
    node _T_50 = bits(io.Buttons, 0, 0) @[Top.scala 39:30]
    node _T_51 = bits(_T_50, 0, 0) @[Top.scala 39:34]
    stable0.io.in <= _T_51 @[Top.scala 39:17]
    inst stable1 of Debounce_2 @[Top.scala 40:23]
    stable1.clock <= clock
    stable1.reset <= reset
    node _T_52 = bits(io.Buttons, 1, 1) @[Top.scala 41:30]
    node _T_53 = bits(_T_52, 0, 0) @[Top.scala 41:34]
    stable1.io.in <= _T_53 @[Top.scala 41:17]
    inst stable2 of Debounce_3 @[Top.scala 42:23]
    stable2.clock <= clock
    stable2.reset <= reset
    node _T_54 = bits(io.Buttons, 2, 2) @[Top.scala 43:30]
    node _T_55 = bits(_T_54, 0, 0) @[Top.scala 43:34]
    stable2.io.in <= _T_55 @[Top.scala 43:17]
    inst stable3 of Debounce_4 @[Top.scala 44:23]
    stable3.clock <= clock
    stable3.reset <= reset
    node _T_56 = bits(io.Buttons, 3, 3) @[Top.scala 45:30]
    node _T_57 = bits(_T_56, 0, 0) @[Top.scala 45:34]
    stable3.io.in <= _T_57 @[Top.scala 45:17]
    wire CPUClock : UInt<1> @[Top.scala 47:22]
    node _T_59 = asUInt(clock) @[Top.scala 48:46]
    node _T_60 = mux(io.Countinue, _T_59, stable.io.out) @[Top.scala 48:18]
    CPUClock <= _T_60 @[Top.scala 48:12]
    node _T_61 = bits(CPUClock, 0, 0) @[Top.scala 50:39]
    node _T_62 = asClock(_T_61) @[Top.scala 50:46]
    node _T_63 = not(io.Reset) @[Top.scala 50:55]
    inst DP of DataPath @[Top.scala 50:74]
    DP.clock <= _T_62
    DP.reset <= _T_63
    node _T_64 = bits(CPUClock, 0, 0) @[Top.scala 51:39]
    node _T_65 = asClock(_T_64) @[Top.scala 51:46]
    node _T_66 = not(io.Reset) @[Top.scala 51:55]
    inst CU of ControlUnit @[Top.scala 51:74]
    CU.clock <= _T_65
    CU.reset <= _T_66
    node _T_67 = bits(CPUClock, 0, 0) @[Top.scala 52:42]
    node _T_68 = asClock(_T_67) @[Top.scala 52:49]
    node _T_69 = not(io.Reset) @[Top.scala 52:58]
    inst ALUCU of ALUControl @[Top.scala 52:77]
    ALUCU.clock <= _T_68
    ALUCU.reset <= _T_69
    node _T_70 = asClock(clk500) @[Top.scala 53:37]
    inst SegDisplay of SegmentDisplay @[Top.scala 53:54]
    SegDisplay.clock <= _T_70
    SegDisplay.reset <= reset
    CU.io.Zero <= DP.io.Zero @[Top.scala 55:14]
    CU.io.OpCode <= DP.io.OpCode @[Top.scala 56:16]
    DP.io.PCWrite <= CU.io.PCWrite @[Top.scala 57:17]
    DP.io.PCWriteCond <= CU.io.PCWriteCond @[Top.scala 58:21]
    DP.io.PCSrc <= CU.io.PCSrc @[Top.scala 59:15]
    DP.io.IRWrite <= CU.io.IRWrite @[Top.scala 60:17]
    DP.io.InstructionOrData <= CU.io.InstructionOrData @[Top.scala 61:27]
    DP.io.RegDst <= CU.io.RegDst @[Top.scala 62:16]
    DP.io.MemOrALUOut <= CU.io.MemOrALUOut @[Top.scala 63:21]
    DP.io.MemWrite <= CU.io.MemWrite @[Top.scala 64:18]
    DP.io.ALUSrc1 <= CU.io.ALUSrc1 @[Top.scala 65:17]
    DP.io.ALUSrc2 <= CU.io.ALUSrc2 @[Top.scala 66:17]
    DP.io.RegWrite <= CU.io.RegWrite @[Top.scala 67:18]
    DP.io.BeqOrBne <= CU.io.BeqOrBne @[Top.scala 68:18]
    DP.io.SignedOrZero <= CU.io.SignedOrZero @[Top.scala 69:22]
    DP.io.SizeSel <= CU.io.SizeSel @[Top.scala 70:17]
    DP.io.ALUCtl <= ALUCU.io.ALUCtl @[Top.scala 72:16]
    ALUCU.io.Funct <= DP.io.Funct @[Top.scala 73:15]
    ALUCU.io.ALUOp <= CU.io.ALUOp @[Top.scala 74:18]
    ALUCU.io.OpCode <= DP.io.OpCode @[Top.scala 75:16]
    node Data = mux(io.RegOrMem, DP.io._DebugRegData, DP.io._DebugMemData) @[Top.scala 79:17]
    node _T_71 = bits(io.Switches, 9, 0) @[Top.scala 80:34]
    DP.io._DebugAddr <= _T_71 @[Top.scala 80:20]
    node _T_72 = bits(Data, 3, 0) @[Top.scala 83:34]
    SegDisplay.io.data[0] <= _T_72 @[Top.scala 83:27]
    node _T_73 = bits(Data, 7, 4) @[Top.scala 83:34]
    SegDisplay.io.data[1] <= _T_73 @[Top.scala 83:27]
    node _T_74 = bits(Data, 11, 8) @[Top.scala 83:34]
    SegDisplay.io.data[2] <= _T_74 @[Top.scala 83:27]
    node _T_75 = bits(Data, 15, 12) @[Top.scala 83:34]
    SegDisplay.io.data[3] <= _T_75 @[Top.scala 83:27]
    node _T_76 = bits(Data, 19, 16) @[Top.scala 83:34]
    SegDisplay.io.data[4] <= _T_76 @[Top.scala 83:27]
    node _T_77 = bits(Data, 23, 20) @[Top.scala 83:34]
    SegDisplay.io.data[5] <= _T_77 @[Top.scala 83:27]
    node _T_78 = bits(Data, 27, 24) @[Top.scala 83:34]
    SegDisplay.io.data[6] <= _T_78 @[Top.scala 83:27]
    node _T_79 = bits(Data, 31, 28) @[Top.scala 83:34]
    SegDisplay.io.data[7] <= _T_79 @[Top.scala 83:27]
    SegDisplay.io.en <= UInt<8>("h0ff") @[Top.scala 85:20]
    io.AN <= SegDisplay.io.an @[Top.scala 86:9]
    io.SEG <= SegDisplay.io.seg @[Top.scala 87:10]
    node _T_81 = bits(DP.io._PC, 15, 0) @[Top.scala 89:21]
    io.PC <= _T_81 @[Top.scala 89:9]
    node _T_82 = asClock(clk50M) @[Top.scala 91:28]
    DP.io.VGAClock <= _T_82 @[Top.scala 91:18]
    io.hs <= DP.io.hs @[Top.scala 92:9]
    io.vs <= DP.io.vs @[Top.scala 93:9]
    io.r <= DP.io.r @[Top.scala 94:8]
    io.g <= DP.io.g @[Top.scala 95:8]
    io.b <= DP.io.b @[Top.scala 96:8]
    DP.io.Switches <= io.Switches @[Top.scala 98:18]
    node _T_83 = cat(stable1.io.out, stable0.io.out) @[Cat.scala 30:58]
    node _T_84 = cat(stable3.io.out, stable2.io.out) @[Cat.scala 30:58]
    node _T_85 = cat(_T_84, _T_83) @[Cat.scala 30:58]
    DP.io.Buttons <= _T_85 @[Top.scala 99:17]
    DP.io.Paint <= io.Paint @[Top.scala 101:15]
    
